robot_spawner_client:
  ros__parameters:
    robot_name: <robot_name>
    robot_namespace: <robot_namespace>
    robot_initial_position: [<robot_initial_pose_x>, <robot_initial_pose_y>, <robot_initial_pose_z>]

amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "<robot_namespace>/base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    map_topic: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "<robot_namespace>/likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "<robot_namespace>/odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan
    set_initial_pose: True
    initial_pose:
      x: <robot_initial_pose_x>
      y: <robot_initial_pose_y>
      z: <robot_initial_pose_z>

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: "<robot_namespace>/base_link"
    robot_base_frame_blackboard_id: "<robot_namespace>/base_link"
    odom_topic: odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_nav_through_poses_bt_xml: "<nav_through_poses_xml>"
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True
    robot_base_frame: "<robot_namespace>/base_link"

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True
    robot_base_frame: "<robot_namespace>/base_link"

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.6
      yaw_goal_tolerance: 0.025
      stateful: True
    # FollowPath:
    #   plugin: "nav2_mppi_controller::MPPIController"
    #   time_steps: 56
    #   model_dt: 0.05
    #   batch_size: 2000
    #   vx_std: 0.2
    #   vy_std: 0.2
    #   wz_std: 0.4
    #   vx_max: 0.5
    #   vx_min: -0.35
    #   vy_max: 0.5
    #   wz_max: 1.9
    #   iteration_count: 1
    #   prune_distance: 1.7
    #   transform_tolerance: 0.1
    #   temperature: 0.3
    #   gamma: 0.015
    #   motion_model: "DiffDrive"
    #   visualize: false
    #   reset_period: 1.0 # (only in Humble)
    #   TrajectoryVisualizer:
    #     trajectory_step: 5
    #     time_step: 3
    #   AckermannConstrains:
    #     min_turning_r: 0.2
      # critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      # critics: ["ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic"]
      # # ConstraintCritic:
      # #   enabled: true
      # #   cost_power: 1
      # #   cost_weight: 4.0
      # GoalCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 1.4
      # GoalAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 3.0
      #   threshold_to_consider: 0.5
      # # PreferForwardCritic:
      # #   enabled: true
      # #   cost_power: 1
      # #   cost_weight: 5.0
      # #   threshold_to_consider: 0.5
      # ObstaclesCritic:
      #   enabled: true
      #   cost_power: 1
      #   repulsion_weight: 1.5
      #   critical_weight: 20.0
      #   consider_footprint: false
      #   collision_cost: 10000.0
      #   collision_margin_distance: 0.1
      #   near_goal_distance: 0.5
      #   inflation_radius: 0.55 # (only in Humble)
      #   cost_scaling_factor: 10.0 # (only in Humble)
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.05
      #   trajectory_point_step: 3
      #   threshold_to_consider: 0.5
      #   offset_from_furthest: 20
      #   use_path_orientations: false
      # PathFollowCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   offset_from_furthest: 5
      #   threshold_to_consider: 1.4
      # PathAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 2.0
      #   offset_from_furthest: 4
      #   threshold_to_consider: 0.5
      #   max_angle_to_furthest: 1.0
      #   mode: 0
    # DWB parameters
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: -1.0
    #   min_vel_y: 0.0
    #   max_vel_x: 1.0
    #   max_vel_y: 0.0
    #   max_vel_theta: 1.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 0.26
    #   min_speed_theta: 0.0
    #   acc_lim_x: 2.5
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 3.2
    #   decel_lim_x: -2.5
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -3.2
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 1.7
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   # critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist", "ObstacleFootprint"]
    #   # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.02
    #   # PathAlign.scale: 0.0
    #   # GoalAlign.scale: 0.0
    #   # PathDist.scale: 32.0
    #   # GoalDist.scale: 24.0
    #   ObstacleFootprint.scale: 3.0
    #   # Oscillation.scale: 3.0
    #   # RotateToGoal.scale: 32.0
    #   # RotateToGoal.slowing_factor: 5.0
    #   # RotateToGoal.lookahead_time: -1.0
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.6
      min_lookahead_dist: 0.3
      max_lookahead_dist: 0.9
      lookahead_time: 1.5
      rotate_to_heading_angular_vel: 1.8
      transform_tolerance: 0.5
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 2.
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 0.3
      use_regulated_linear_velocity_scaling: true
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.25
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_rotate_to_heading: false
      allow_reversing: true
      rotate_to_heading_min_angle: 0.785
      max_angular_accel: 0.5
      max_robot_pose_search_dist: 10.0
      use_interpolation: false

local_costmap:
  local_costmap:
    ros__parameters:
      robot_base_frame: "<robot_namespace>/base_link"
      use_sim_time: True
      global_frame: <robot_namespace>/odom
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      # robot_radius: 0.22
      footprint: "[ [0.95, 0.66],  [-0.95, 0.66],[-0.95, -0.66],[0.95, -0.66]]"
      # footprint: "[ [0.645, 0.915],  [-0.645, 0.915], [-0.645, -0.915], [0.645, -0.915]]"
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.1
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: False
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /<robot_namespace>/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      robot_base_frame: "<robot_namespace>/base_link"
      global_frame: "map"
      use_sim_time: True
      # robot_radius: 0.22
      footprint: "[ [0.95, 0.66],  [-0.95, 0.66],[-0.95, -0.66],[0.95, -0.66]]"
      # footprint: "[ [0.645, 0.915],  [-0.645, 0.915], [-0.645, -0.915], [0.645, -0.915]]"
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /<robot_namespace>/scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.6
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "map_warehouse.yaml"
    save_map_timeout: 5.0
    frame_id: "map"

planner_server:
  ros__parameters:
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      # plugin: "nav2_smac_planner/SmacPlannerHybrid"
      # plugin: "nav2_navfn_planner/NavfnPlanner"
      # plugin: nav2_smac_planner/SmacPlanner2D
      plugin: nav2_smac_planner/SmacPlannerLattice
      tolerance: 0.5
      # use_astar: false
      allow_unknown: true
      rotation_penalty: 20.0
      allow_reverse_expansion: true
      reverse_penalty: 7.0
      non_straight_penalty: 50.0
      # use_final_approach_orientation: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    robot_base_frame: "<robot_namespace>/base_link"
    smoother_plugins: ["SmoothPath"]

    SmoothPath:
      plugin: "nav2_constrained_smoother/ConstrainedSmoother"
      reversing_enabled: true       # whether to detect forward/reverse direction and cusps. Should be set to false for paths without orientations assigned
      path_downsampling_factor: 3   # every n-th node of the path is taken. Useful for speed-up
      path_upsampling_factor: 2     # 0 - path remains downsampled, 1 - path is upsampled back to original granularity using cubic bezier, 2... - more upsampling
      keep_start_orientation: true  # whether to prevent the start orientation from being smoothed
      keep_goal_orientation: true   # whether to prevent the gpal orientation from being smoothed
      minimum_turning_radius: 0.26  # minimum turning radius the robot can perform. Can be set to 0.0 (or w_curve can be set to 0.0 with the same effect) for diff-drive/holonomic robots
      w_curve: 0.0                 # weight to enforce minimum_turning_radius
      w_dist: 10.0                   # weight to bind path to original as optional replacement for cost weight
      w_smooth: 2000.0           # weight to maximize smoothness of path
      w_cost: 0.015                 # weight to steer robot away from collision and cost

      # Parameters used to improve obstacle avoidance near cusps (forward/reverse movement changes)
      w_cost_cusp_multiplier: 3.0   # option to use higher weight during forward/reverse direction change which is often accompanied with dangerous rotations
      cusp_zone_length: 2.5         # length of the section around cusp in which nodes use w_cost_cusp_multiplier (w_cost rises gradually inside the zone towards the cusp point, whose costmap weight eqals w_cost*w_cost_cusp_multiplier)

      # Points in robot frame to grab costmap values from. Format: [x1, y1, weight1, x2, y2, weight2, ...]
      # IMPORTANT: Requires much higher number of iterations to actually improve the path. Uncomment only if you really need it (highly elongated/asymmetric robots)
      # cost_check_points: [-0.185, 0.0, 1.0]

      optimizer:
        max_iterations: 700            # max iterations of smoother
        debug_optimizer: false        # print debug info
        gradient_tol: 5e3
        fn_tol: 1.0e-15
        param_tol: 1.0e-20

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: <robot_namespace>/odom
    robot_base_frame: "<robot_namespace>/base_link"
    transform_tolerance: 0.5
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.2
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0